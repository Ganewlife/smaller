**********************Debuter avec ELectron et Python *******************
pip install flask flask_sqlalchemy flask_cors

python -m venv env

.\env\Scripts\activate.bat

creer le fichier app.py

npm init -y
Installez Electron et Axios:
Une fois le projet initialisé, installez Electron et Axios :

npm install --save electron axios

Créez un fichier main.js pour configurer l'application Electron :






your_project/
│
├── src/                   # Code source de l'application Electron
│   ├── main.js            # Fichier principal d'Electron
│   ├── preload.js         # Script de préchargement d'Electron
│   ├── index.html         # Fichier HTML principal
│   ├── renderer/          # Code de l'interface utilisateur (frontend)
│   │   ├── renderer.js     # Script de rendu principal
│   │   ├── styles.css      # Fichier CSS pour le style
│   │   └── components/     # Composants réutilisables (si nécessaire)
│   └── assets/            # Ressources statiques (images, etc.)
│
├── backend/               # Code du backend Flask
│   ├── app.py             # Point d'entrée de l'application Flask
│   ├── models.py          # Modèles de base de données (SQLAlchemy)
│   ├── routes.py          # Routes de l'API
│   ├── config.py          # Configuration de l'application
│   ├── requirements.txt    # Dépendances Python
│   └── database.db        # Fichier de base de données SQLite
│
├── .gitignore             # Fichiers à ignorer par Git
└── README.md              # Documentation du projet


npm init -y

npm install electron --save-dev

Configurer package.json pour lancer Electron : Ajoutez ou modifiez le script suivant dans package.json :
"scripts": {
    "start": "electron ."
}

Installer Flask et SQLAlchemy pour DB
pip install Flask SQLAlchemy
pip install Flask-Migrate

Initialiser le dépôt de migration : Dans le répertoire backend, exécutez :
flask db init
Créer une migration pour le schéma actuel de votre modèle de données :
flask db migrate -m "Initial migration."
Appliquer la migration à la base de données, ce qui crée le fichier de base de données SQLite (si celui-ci n'existe pas encore) :
flask db upgrade
Répéter les migrations chaque fois que les modèles changent.

cd backend
flask rendu

npm start



















=====================================================Techniques ======================
# Relation avec Membre
membres = db.relationship('Membre', backref='statut', lazy=True)
Explication de la Ligne membres = db.relationship('Membre', backref='statut', lazy=True)
Cette ligne crée une relation entre le modèle Statut et le modèle Membre. Voici l'explication détaillée :

membres = db.relationship('Membre', backref='statut', lazy=True) :
db.relationship : Crée une relation entre deux tables (dans ce cas, Statut et Membre).
'Membre' : Cela indique que chaque Statut peut être lié à plusieurs instances de Membre. En d'autres termes, un statut (comme "Actif") peut être attribué à plusieurs membres.
backref='statut' : Crée une propriété inverse dans le modèle Membre. Cela signifie que chaque instance de Membre aura un attribut appelé statut qui renverra l'instance de Statut associée à ce membre. Par exemple, si un membre a un statut "Actif", vous pourrez y accéder via membre.statut.
lazy=True : Cette option détermine la façon dont SQLAlchemy charge les objets liés.
lazy=True signifie que les objets liés (dans ce cas, les membres) ne sont chargés que lorsque vous y accédez pour la première fois, au lieu de les charger automatiquement en même temps que l'objet parent (le statut).
Concrètement, cette ligne permet :
Depuis Statut : Vous pouvez accéder à tous les membres qui ont un statut particulier, comme ceci :

python
Copier le code
statut_actif = Statut.query.filter_by(nom="Actif").first()
for membre in statut_actif.membres:
    print(membre.nom)
Ici, statut_actif.membres renvoie tous les membres qui ont le statut "Actif".

Depuis Membre : Vous pouvez accéder au statut d'un membre particulier, comme ceci :

python
Copier le code
membre = Membre.query.get(1)
print(membre.statut.nom)  # Affiche le nom du statut du membre
Ici, membre.statut renvoie l'instance du statut associé au membre



___________________________ Questions de details____________________________
Pour participer à un evenement, l'inscription est elle obligatoire ?

Pour les evenements recurrrentes, ( il y aura plusieurs participation),
 si oui: comment marquer la distinction pour les participations


 Projet:

Nouveau : Le projet est créé, mais aucune tâche n'a été assignée ou démarrée.
En cours : Des tâches ont commencé et le projet progresse.
Terminé : Toutes les tâches sont terminées et le projet est clôturé.
En attente : Le projet est en pause pour diverses raisons.
Tâche:

À faire : La tâche est définie, mais pas encore commencée.
En cours : La tâche est en cours de réalisation.
Terminée : La tâche est finalisée.
Bloquée : La tâche rencontre des obstacles ou dépend d'une autre tâche ou action.
Revue : La tâche est en cours d'évaluation ou de validation.



SQLITE EPLORER

-- SQLite
DELETE FROM inscriptions
WHERE membre_id NOT IN (SELECT id FROM membres);



++++++++++++++++++++++++++ A faire ++++++++++++++++++++++=

historique_statuts

budgets
rapport_financiers
projet
taches
proces_verbaux
documents
